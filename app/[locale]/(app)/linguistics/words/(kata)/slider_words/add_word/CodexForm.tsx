"use client";

import React, {memo, useCallback, useEffect} from "react";
import { Formik, Form, Field, FieldArray, ErrorMessage } from "formik";
import {
  Input,
  Button,
  Box,
  Typography,
  IconButton, CircularProgress,
} from "@mui/material";
import {Add, Delete, ExitToAppTwoTone} from "@mui/icons-material";
import {validationSchema} from "@/app/[locale]/(app)/linguistics/words/(kata)/slider_words/add_word/validationSchema";
import {DynamicArrayField} from "@/app/[locale]/(app)/linguistics/words/(kata)/slider_words/add_word/DynamicArrayField";
import {JsonUploader} from "@/app/[locale]/(app)/linguistics/words/(kata)/slider_words/add_word/JsonUploader";
import {useAppDispatch, useAppSelector} from "@/app/store/hooks";
import {addWordToCarousel, LoadingStatus} from "@/app/store/slices/linguisticsSlice";
import {Base_button} from "@/app/ui/math/components/Base_button";





// –ù–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ñ–æ—Ä–º—ã
const initialValues: CodexFormValues = {
  title: "",
  morpheme: {
    prefix: [""],
    root: [""],
    suffix: [""],
    end: [""],
  },
  description: "",
  icon: "",
  quote: "",
  annotation: "",
  joke: "",
  derivatives: [""],
};


export const CodexForm: React.FC<CodexFormProps> = memo(function CodexForm({
                                                           editingFrom,
                                                           isEditingForm
                                                         }) {

  const {loading}  = useAppSelector(state => state.linguistics)
  const dispatch = useAppDispatch();


  const handleSubmit = useCallback((values: CodexFormValues, { resetForm }: any) => {
        dispatch(addWordToCarousel(values))
      resetForm();
  }, [addWordToCarousel])






  return (

      <>
          <div className="relative right-0 flex justify-end">
              <Base_button
                  classStyle={"exit_button"}
                  onClick={() => isEditingForm(!editingFrom)}
                  >
                  <ExitToAppTwoTone className="text-3xl " />
              </Base_button>
          </div>
          <Box className={"border-2 border-gray-200 dark:border-gray-700"} mx="auto" p={4}>
              <Typography variant="h4" gutterBottom>
                  –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
              </Typography>
              {/*{loading.addWord.message && <p>{loading.addWord.message}</p>}*/}
              <Formik
                  initialValues={initialValues}
                  validationSchema={validationSchema}
                  onSubmit={handleSubmit}
              >
                  {({ values, setFieldValue, setValues }) => (
                      <Form>
                          {/* –ü–æ–ª–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ JSON */}
                          <JsonUploader
                              placeholder='{
                          "title": "–ü—Ä–∏–º–µ—Ä",
                          "description": "–û–ø–∏—Å–∞–Ω–∏–µ",
                          "morpheme": {
                            "prefix": ["–ø—Ä–µ"],
                            "root": ["–∫–æ—Ä–µ–Ω—å1"],
                            "suffix": ["—Å—É—Ñ"],
                            "end": ["–æ–∫–æ–Ω—á–∞–Ω–∏–µ"]
                          },
                          "icon": "üåü",
                          "quote": "–¶–∏—Ç–∞—Ç–∞",
                          "annotation": "–ê–Ω–Ω–æ—Ç–∞—Ü–∏—è",
                          "joke": "–®—É—Ç–∫–∞",
                          "derivatives": ["–ø—Ä–æ–∏–∑–≤–æ–¥–Ω–æ–µ1"]
                       }'
                              onJsonParsed={(parsedData) => {
                                  const updatedValues = {
                                      ...values,
                                      ...parsedData,
                                      morpheme: {
                                          ...values.morpheme,
                                          ...parsedData.morpheme,
                                      },
                                  };
                                  setValues(updatedValues);
                              }}
                          />
                          {/* –ü—Ä–∏—Å—Ç–∞–≤–∫–∏ */}
                          <DynamicArrayField
                              name="morpheme.prefix"
                              label="–ü—Ä–µ—Ñ–∏–∫—Å—ã"
                              placeholder="–í–≤–µ–¥–∏—Ç–µ –ø—Ä–µ—Ñ–∏–∫—Å"
                              minItems={1}
                              allowMultiline={true}
                          />
                          {/* –ö–æ—Ä–Ω–∏ */}
                          <DynamicArrayField
                              name="morpheme.root"
                              label="–ö–æ—Ä–Ω–∏"
                              placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä–µ–Ω—å"
                              minItems={1}
                              allowMultiline={true}
                          />
                          {/* Suffix */}
                          <DynamicArrayField
                              name="morpheme.suffix"
                              label="–°—É—Ñ—Ñ–∏–∫—Å—ã"
                              placeholder="–í–≤–µ–¥–∏—Ç–µ —Å—É—Ñ—Ñ–∏–∫—Å"
                              minItems={1}
                              allowMultiline={true}
                          />
                          {/* End */}
                          <DynamicArrayField
                              name="morpheme.end"
                              label="–û–∫–æ–Ω—á–∞–Ω–∏—è"
                              placeholder="–í–≤–µ–¥–∏—Ç–µ –æ–∫–æ–Ω—á–∞–Ω–∏–µ"
                              minItems={1}
                              allowMultiline={true}
                          />

                          {/* –û–ø–∏—Å–∞–Ω–∏–µ */}
                          <Box mb={3}>
                              <Field name="description">
                                  {({ field }: any) => (
                                      <Input className={"paragraph_base"}
                                             {...field}
                                             fullWidth
                                             placeholder={"–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –æ–ø–∏—Å–∞–Ω–∏–µ."}
                                             label="–û–ø–∏—Å–∞–Ω–∏–µ"
                                             variant="outlined"
                                             multiline
                                             rows={4}
                                             error={!!ErrorMessage}
                                             helperText={<ErrorMessage name="description" />}
                                      />
                                  )}
                              </Field>
                          </Box>

                          {/* –î—Ä—É–≥–∏–µ –ø–æ–ª—è... */}
                          {/* –ü—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ */}
                          <Box mb={3}>
                              <Typography variant="subtitle1">–ü—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ:</Typography>
                              <FieldArray name="derivatives">
                                  {({ remove, push }) => (
                                      <>
                                          {values.derivatives.map((derivative, index) => (
                                              <Box display="flex" alignItems="center" key={index} mb={2}>
                                                  <Field name={`derivatives[${index}]`}>
                                                      {({ field }: any) => (
                                                          <Input className={"paragraph_base"}
                                                                 {...field}
                                                                 fullWidth
                                                                 placeholder={"–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ."}
                                                                 label={`–ü—Ä–æ–∏–∑–≤–æ–¥–Ω–æ–µ ${index + 1}`}
                                                                 variant="outlined"
                                                                 error={!!ErrorMessage}
                                                                 multiline
                                                                 helperText={
                                                                     <ErrorMessage name={`derivatives[${index}]`} />
                                                                 }
                                                          />
                                                      )}
                                                  </Field>
                                                  <IconButton
                                                      onClick={() => remove(index)}
                                                      disabled={values.derivatives.length === 1}
                                                      aria-label="—É–¥–∞–ª–∏—Ç—å"
                                                      color="error"
                                                  >
                                                      <Delete />
                                                  </IconButton>
                                              </Box>
                                          ))}
                                          <Button
                                              variant="contained"
                                              startIcon={<Add />}
                                              onClick={() => push("")}
                                          >
                                              –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–æ–µ
                                          </Button>
                                      </>
                                  )}
                              </FieldArray>
                          </Box>

                          {/* –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ */}
                          <Base_button
                              disabled={(loading.addWord.status === LoadingStatus.padding)}
                              classStyle="button_to bg-lesson-blue hover:bg-blue-500 dark:bg-blue-650 dark:hover:bg-blue-700 disabled:bg-gray-300 dark:disabled:bg-dark-card"
                              type="submit"
                          >
                              {
                                  loading.addWord.status === LoadingStatus.padding
                                      ? <>
                                          <CircularProgress color="success" size={20} sx={{marginRight: 1}}/>
                                          {loading.addWord.message}
                                      </>
                                      : loading.addWord.status === LoadingStatus.fulfilled
                                          ? <>–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å</>
                                          : <>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ä–∞–∑!!!</>
                              }

                          </Base_button>
                          <Button
                              onClick={() => {isEditingForm(!editingFrom)}}
                              variant="contained"
                              color="success"
                              fullWidth
                              size="large"
                          >
                              –ù–∞–∑–∞–¥
                          </Button>
                      </Form>
                  )}
              </Formik>
          </Box>
      </>

  );
})


//------------------Types-----------------------------------


interface CodexFormProps {
  editingFrom: boolean
  isEditingForm (active:  boolean): void
}

interface CodexFormValues {
  title: string;
  morpheme: {
    prefix?: string[];
    root: string[];
    suffix?: string[];
    end?: string[];
  };
  description: string;
  icon: string;
  quote: string;
  annotation: string;
  joke: string;
  derivatives: string[];
}