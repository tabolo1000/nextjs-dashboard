"use client"

import React from "react";
import { Formik, Form, Field, FieldArray, ErrorMessage } from "formik";
import * as Yup from "yup";
import {
  TextField,
  Button,
  Box,
  Typography,
  IconButton,
} from "@mui/material";
import { Add, Delete } from "@mui/icons-material";
import axios from "axios";


// –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
interface CodexFormValues {
  title: string;
  morpheme: {
    root: string[];
  };
  description: string;
  icon: string;
  quote: string;
  annotation: string;
  joke: string;
  derivatives: string[];
}

// –ù–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ñ–æ—Ä–º—ã
const initialValues: CodexFormValues = {
  title: "",
  morpheme: {
    root: [""],
  },
  description: "",
  icon: "",
  quote: "",
  annotation: "",
  joke: "",
  derivatives: [""],
};

// –°—Ö–µ–º–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
const validationSchema = Yup.object({
  title: Yup.string().required("–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ"),
  morpheme: Yup.object({
    root: Yup.array()
      .of(Yup.string().required("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä–µ–Ω—å"))
      .min(1, "–£–∫–∞–∂–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫–æ—Ä–µ–Ω—å"),
  }),
  description: Yup.string().required("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ"),
  icon: Yup.string().required("–í–≤–µ–¥–∏—Ç–µ –∏–∫–æ–Ω–∫—É"),
  quote: Yup.string().required("–í–≤–µ–¥–∏—Ç–µ —Ü–∏—Ç–∞—Ç—É"),
  annotation: Yup.string().required("–í–≤–µ–¥–∏—Ç–µ –∞–Ω–Ω–æ—Ç–∞—Ü–∏—é"),
  joke: Yup.string().required("–í–≤–µ–¥–∏—Ç–µ —à—É—Ç–∫—É"),
  derivatives: Yup.array()
    .of(Yup.string().required("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–æ–µ"))
    .min(1, "–£–∫–∞–∂–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–æ–µ"),
});

let a = {
    "title": "–ü–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å: –∞–Ω–≥–ª. Persistence [p…ôÀàs…™st…ôns], —Ñ—Ä. Persistance [p…õ Å.si.st…ëÃÉs], –Ω–µ–º. Persistenz [Àåp…õ Å.z…™Ààst…õntÕ°s], –ø–æ–ª—å—Å–∫. Persystencja [p…õr.s…®sÀàt…õn.tÕ°sja]",
    "icon": "üîÑ",
    "quote": "¬´–ü–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å ‚Äî —ç—Ç–æ —É–º–µ–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –¥–≤–∏–≥–∞—Ç—å—Å—è –≤–ø–µ—Ä—ë–¥, –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –ª—é–±—ã–µ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è.¬ª",
    "description": "–°–ª–æ–≤–æ ¬´–ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å¬ª –∑–∞–∏–º—Å—Ç–≤–æ–≤–∞–Ω–æ –∏–∑ –ª–∞—Ç–∏–Ω—Å–∫–æ–≥–æ *persistentia*, —á—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç ¬´—Å—Ç–æ–π–∫–æ—Å—Ç—å¬ª, ¬´—É–ø–æ—Ä—Å—Ç–≤–æ¬ª –∏–ª–∏ ¬´–Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç—å¬ª. –ö–æ—Ä–µ–Ω—å *persistere* —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞ *per-* (¬´—á–µ—Ä–µ–∑¬ª, ¬´–¥–æ –∫–æ–Ω—Ü–∞¬ª) –∏ *sistere* (¬´—Å—Ç–æ—è—Ç—å¬ª, ¬´–æ—Å—Ç–∞–≤–∞—Ç—å—Å—è¬ª). –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ —Å–ª–æ–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–æ—Å—å –≤ –∑–Ω–∞—á–µ–Ω–∏–∏ ¬´–Ω–µ–∏–∑–º–µ–Ω–Ω–æ–µ —É–ø–æ—Ä—Å—Ç–≤–æ¬ª, –Ω–æ —Å —Ä–∞–∑–≤–∏—Ç–∏–µ–º –Ω–∞—É–∫–∏ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –ø—Ä–∏–æ–±—Ä–µ–ª–æ –±–æ–ª–µ–µ —à–∏—Ä–æ–∫–∏–π —Å–ø–µ–∫—Ç—Ä –∑–Ω–∞—á–µ–Ω–∏–π. –°–µ–≥–æ–¥–Ω—è —Ç–µ—Ä–º–∏–Ω –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –≤ —Ç–∞–∫–∏—Ö –æ–±–ª–∞—Å—Ç—è—Ö, –∫–∞–∫ –º–µ–¥–∏—Ü–∏–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –≤–∏—Ä—É—Å–æ–≤), –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–æ–ª–≥–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö), –ø—Å–∏—Ö–æ–ª–æ–≥–∏—è (—É–ø–æ—Ä—Å—Ç–≤–æ –≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —Ü–µ–ª–∏) –∏ –¥—Ä—É–≥–∏—Ö –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞—Ö. –í —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ —Ç–µ—Ä–º–∏–Ω –ø–æ—è–≤–∏–ª—Å—è –≤ XX –≤–µ–∫–µ, –æ—Å–æ–±–µ–Ω–Ω–æ —Å —Ä–æ—Å—Ç–æ–º –Ω–∞—É—á–Ω–æ–π –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã.",
    "morpheme": {
    "prefix": ["–ø–µ—Ä"],
      "root": ["—Å–∏—Å—Ç–µ–Ω—Ç"],
      "suffix": ["–Ω–æ—Å—Ç—å"]
  },
    "annotation": "–ü–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å —Å–∏–º–≤–æ–ª–∏–∑–∏—Ä—É–µ—Ç —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –∫–∞–∫ –≤ –ø—Ä–∏—Ä–æ–¥–µ, —Ç–∞–∫ –∏ –≤ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö. –≠—Ç–æ –∫–∞—á–µ—Å—Ç–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–µ–æ–¥–æ–ª–µ–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å.",
    "joke": "–ü–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å ‚Äî —ç—Ç–æ –∫–æ–≥–¥–∞ –¥–∞–∂–µ Wi-Fi –≤ –ø–æ–¥–≤–∞–ª–µ —É–ø–æ—Ä–Ω–æ –¥–µ—Ä–∂–∏—Ç –æ–¥–Ω—É –ø–∞–ª–æ—á–∫—É —Å–≤—è–∑–∏.",
    "derivatives": [
    "–ü–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ü–∏—è ‚Äî —É—Å—Ç–∞—Ä–µ–≤—à–∞—è —Ñ–æ—Ä–º–∞, –æ–±–æ–∑–Ω–∞—á–∞—é—â–∞—è —Å—Ç–æ–π–∫–æ—Å—Ç—å –∏–ª–∏ –¥–æ–ª–≥–æ–≤—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å.",
    "–ü–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–π ‚Äî —É—Å—Ç–æ–π—á–∏–≤—ã–π, —Å–æ—Ö—Ä–∞–Ω—è—é—â–∏–π —Å–≤–æ–∏ —Å–≤–æ–π—Å—Ç–≤–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ –±–∏–æ–ª–æ–≥–∏–∏ –∏–ª–∏ —Ö–∏–º–∏–∏.",
    "–°—É–ø–µ—Ä–ø—ë—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–π ‚Äî —Å –ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç–æ–π –¥–æ–ª–≥–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å—é (–∏–Ω–æ–≥–¥–∞ –∏—Ä–æ–Ω–∏—á–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è).",
    "–ü–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ ‚Äî –≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–µ: —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –¥–æ–ª–≥–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.",
    "–ù–µ–ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–π ‚Äî –æ–±—Ä–∞—Ç–Ω–æ–µ –ø–æ–Ω—è—Ç–∏–µ, –æ–±–æ–∑–Ω–∞—á–∞—é—â–µ–µ –≤—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å –∏–ª–∏ –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å.",
    "–ü–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å ‚Äî –≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏: –ø—Ä–æ—Ü–µ—Å—Å, –∫–æ—Ç–æ—Ä—ã–π —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –∑–∞–ø—É—Å–∫–∞–º–∏.",
    "–ü–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–∞—è –ø–∞–º—è—Ç—å ‚Äî —Ç–∏–ø –ø–∞–º—è—Ç–∏, —Å–æ—Ö—Ä–∞–Ω—è—é—â–∏–π –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ø–∏—Ç–∞–Ω–∏—è.",
    "–ü–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–∞—è –∏–Ω—Ñ–µ–∫—Ü–∏—è ‚Äî —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ, –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–º –≤–∏—Ä—É—Å —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ –æ—Ä–≥–∞–Ω–∏–∑–º–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è."
  ]
  }

const instance = axios.create({
    baseURL: "http://localhost:3001/words",
})

const CodexForm: React.FC = () => {



  const handleSubmit = async (values: CodexFormValues) => {
    try {
        debugger
      const response = await instance.post("", values);
      console.log("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã:", response.data);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö:", error);
    }
  };



  return (
    <Box maxWidth="md" mx="auto" p={4}>
      <Typography variant="h4" gutterBottom>
        –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
      </Typography>
      <Formik
        initialValues={initialValues}
        validationSchema={validationSchema}
        onSubmit={handleSubmit}
      >
        {({ values, setFieldValue }) => (
          <Form>
            {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
            <Box mb={3}>
              <Field name="title">
                {({ field }: any) => (
                  <TextField
                    {...field}
                    fullWidth
                    label="–ó–∞–≥–æ–ª–æ–≤–æ–∫"
                    variant="outlined"
                    error={!!ErrorMessage}
                    helperText={<ErrorMessage name="title" />}
                  />
                )}
              </Field>
            </Box>

            {/* –ö–æ—Ä–Ω–∏ */}
            <Box mb={3}>
              <Typography variant="subtitle1">–ö–æ—Ä–Ω–∏:</Typography>
              <FieldArray name="morpheme.root">
                {({ remove, push }) => (
                  <>
                    {values.morpheme.root.map((root, index) => (
                      <Box display="flex" alignItems="center" key={index} mb={2}>
                        <Field name={`morpheme.root[${index}]`}>
                          {({ field }: any) => (
                            <TextField
                              {...field}
                              fullWidth
                              label={`–ö–æ—Ä–µ–Ω—å ${index + 1}`}
                              variant="outlined"
                              error={!!ErrorMessage}
                              helperText={
                                <ErrorMessage name={`morpheme.root[${index}]`} />
                              }
                            />
                          )}
                        </Field>
                        <IconButton
                          onClick={() => remove(index)}
                          disabled={values.morpheme.root.length === 1}
                          aria-label="—É–¥–∞–ª–∏—Ç—å"
                          color="error"
                        >
                          <Delete />
                        </IconButton>
                      </Box>
                    ))}
                    <Button
                      variant="contained"
                      startIcon={<Add />}
                      onClick={() => push("")}
                    >
                      –î–æ–±–∞–≤–∏—Ç—å –∫–æ—Ä–µ–Ω—å
                    </Button>
                  </>
                )}
              </FieldArray>
            </Box>

            {/* –û–ø–∏—Å–∞–Ω–∏–µ */}
            <Box mb={3}>
              <Field name="description">
                {({ field }: any) => (
                  <TextField
                    {...field}
                    fullWidth
                    label="–û–ø–∏—Å–∞–Ω–∏–µ"
                    variant="outlined"
                    multiline
                    rows={4}
                    error={!!ErrorMessage}
                    helperText={<ErrorMessage name="description" />}
                  />
                )}
              </Field>
            </Box>

            {/* –ò–∫–æ–Ω–∫–∞ */}
            <Box mb={3}>
              <Field name="icon">
                {({ field }: any) => (
                  <TextField
                    {...field}
                    fullWidth
                    label="–ò–∫–æ–Ω–∫–∞"
                    variant="outlined"
                    error={!!ErrorMessage}
                    helperText={<ErrorMessage name="icon" />}
                  />
                )}
              </Field>
            </Box>

            {/* –¶–∏—Ç–∞—Ç–∞ */}
            <Box mb={3}>
              <Field name="quote">
                {({ field }: any) => (
                  <TextField
                    {...field}
                    fullWidth
                    label="–¶–∏—Ç–∞—Ç–∞"
                    variant="outlined"
                    error={!!ErrorMessage}
                    helperText={<ErrorMessage name="quote" />}
                  />
                )}
              </Field>
            </Box>

            {/* –ê–Ω–Ω–æ—Ç–∞—Ü–∏—è */}
            <Box mb={3}>
              <Field name="annotation">
                {({ field }: any) => (
                  <TextField
                    {...field}
                    fullWidth
                    label="–ê–Ω–Ω–æ—Ç–∞—Ü–∏—è"
                    variant="outlined"
                    multiline
                    rows={2}
                    error={!!ErrorMessage}
                    helperText={<ErrorMessage name="annotation" />}
                  />
                )}
              </Field>
            </Box>

            {/* –®—É—Ç–∫–∞ */}
            <Box mb={3}>
              <Field name="joke">
                {({ field }: any) => (
                  <TextField
                    {...field}
                    fullWidth
                    label="–®—É—Ç–∫–∞"
                    variant="outlined"
                    error={!!ErrorMessage}
                    helperText={<ErrorMessage name="joke" />}
                  />
                )}
              </Field>
            </Box>

            {/* –ü—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ */}
            <Box mb={3}>
              <Typography variant="subtitle1">–ü—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ:</Typography>
              <FieldArray name="derivatives">
                {({ remove, push }) => (
                  <>
                    {values.derivatives.map((derivative, index) => (
                      <Box display="flex" alignItems="center" key={index} mb={2}>
                        <Field name={`derivatives[${index}]`}>
                          {({ field }: any) => (
                            <TextField
                              {...field}
                              fullWidth
                              label={`–ü—Ä–æ–∏–∑–≤–æ–¥–Ω–æ–µ ${index + 1}`}
                              variant="outlined"
                              error={!!ErrorMessage}
                              helperText={
                                <ErrorMessage name={`derivatives[${index}]`} />
                              }
                            />
                          )}
                        </Field>
                        <IconButton
                          onClick={() => remove(index)}
                          disabled={values.derivatives.length === 1}
                          aria-label="—É–¥–∞–ª–∏—Ç—å"
                          color="error"
                        >
                          <Delete />
                        </IconButton>
                      </Box>
                    ))}
                    <Button
                      variant="contained"
                      startIcon={<Add />}
                      onClick={() => push("")}
                    >
                      –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–æ–µ
                    </Button>
                  </>
                )}
              </FieldArray>
            </Box>

            {/* –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ */}
            <Button
              type="submit"
              variant="contained"
              color="primary"
              fullWidth
              size="large"
            >
              –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å
            </Button>
          </Form>
        )}
      </Formik>
    </Box>
  );
};

export default CodexForm;