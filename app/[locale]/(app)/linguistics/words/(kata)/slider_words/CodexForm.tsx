"use client";

import React from "react";
import { Formik, Form, Field, FieldArray, ErrorMessage } from "formik";
import * as Yup from "yup";
import {
  Input ,
  Button,
  Box,
  Typography,
  IconButton,
} from "@mui/material";
import { Add, Delete } from "@mui/icons-material";
import axios from "axios";

// –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
interface CodexFormValues {
  title: string;
  morpheme: {
    root: string[];
  };
  description: string;
  icon: string;
  quote: string;
  annotation: string;
  joke: string;
  derivatives: string[];
}

// –ù–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ñ–æ—Ä–º—ã
const initialValues: CodexFormValues = {
  title: "",
  morpheme: {
    root: [""],
  },
  description: "",
  icon: "",
  quote: "",
  annotation: "",
  joke: "",
  derivatives: [""],
};

// –°—Ö–µ–º–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
const validationSchema = Yup.object({
  title: Yup.string().required("–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ"),
  morpheme: Yup.object({
    root: Yup.array()
        .of(Yup.string().required("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä–µ–Ω—å"))
        .min(1, "–£–∫–∞–∂–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫–æ—Ä–µ–Ω—å"),
  }),
  description: Yup.string().required("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ"),
  icon: Yup.string().required("–í–≤–µ–¥–∏—Ç–µ –∏–∫–æ–Ω–∫—É"),
  quote: Yup.string().required("–í–≤–µ–¥–∏—Ç–µ —Ü–∏—Ç–∞—Ç—É"),
  annotation: Yup.string().required("–í–≤–µ–¥–∏—Ç–µ –∞–Ω–Ω–æ—Ç–∞—Ü–∏—é"),
  joke: Yup.string().required("–í–≤–µ–¥–∏—Ç–µ —à—É—Ç–∫—É"),
  derivatives: Yup.array()
      .of(Yup.string().required("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–æ–µ"))
      .min(1, "–£–∫–∞–∂–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–æ–µ"),
});

const instance = axios.create({
  baseURL: "http://localhost:3001/words",
});

export const CodexForm: React.FC = () => {
  const handleSubmit = async (values: CodexFormValues) => {
    try {
      const response = await instance.post("", values);
      console.log("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã:", response.data);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö:", error);
    }
  };

  return (
      <Box className={"border-2 border-gray-200 dark:border-gray-700"} maxWidth="md" mx="auto" p={4}>
        <Typography variant="h4" gutterBottom>
          –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
        </Typography>
        <Formik
            initialValues={initialValues}
            validationSchema={validationSchema}
            onSubmit={handleSubmit}
        >
          {({ values, setFieldValue, setValues }) => (
              <Form>
                {/* –ü–æ–ª–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ JSON */}
                <Box mb={3}>
                  <Typography variant="subtitle1">–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ (JSON):</Typography>
                  <Input
                      className={"paragraph_base"}
                      fullWidth
                      multiline
                      rows={4}
                      variant="outlined"
                      placeholder='{"title": "–ü—Ä–∏–º–µ—Ä", "description": "–û–ø–∏—Å–∞–Ω–∏–µ", "morpheme": {"root": ["–∫–æ—Ä–µ–Ω—å1"]}, "icon": "üåü", "quote": "–¶–∏—Ç–∞—Ç–∞", "annotation": "–ê–Ω–Ω–æ—Ç–∞—Ü–∏—è", "joke": "–®—É—Ç–∫–∞", "derivatives": ["–ø—Ä–æ–∏–∑–≤–æ–¥–Ω–æ–µ1"]}'
                      onBlur={(e) => {
                        const jsonString = e.target.value;
                        try {
                          const parsedData = JSON.parse(jsonString);

                          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—ä–µ–∫—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Ñ–æ—Ä–º—ã
                          if (typeof parsedData === "object" && parsedData !== null) {
                            setValues({ ...values, ...parsedData }); // –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —Ñ–æ—Ä–º—ã
                          } else {
                            alert("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON");
                          }
                        } catch (error) {
                          alert("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: " + error.message);
                        }
                      }}
                  />
                  <Typography className={""} variant="caption" color="textSecondary">
                    –í—Å—Ç–∞–≤—å—Ç–µ JSON-—Å—Ç—Ä–æ–∫—É, —á—Ç–æ–±—ã –∑–∞–ø–æ–ª–Ω–∏—Ç—å –≤—Å–µ –ø–æ–ª—è —Ñ–æ—Ä–º—ã.
                  </Typography>
                </Box>

                {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
                <Box mb={3}>
                  <Field name="title">
                    {({ field }: any) => (
                        <Input className={"paragraph_base"}
                            {...field}
                            fullWidth
                               multiline
                            label="–ó–∞–≥–æ–ª–æ–≤–æ–∫"
                            variant="outlined"
                            error={!!ErrorMessage}
                            helperText={<ErrorMessage name="title" />}
                               placeholder={"–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–≥–æ–ª–æ–≤–æ–∫."}
                        />
                    )}
                  </Field>
                </Box>

                {/* –ö–æ—Ä–Ω–∏ */}
                <Box mb={3}>
                  <Typography variant="subtitle1">–ö–æ—Ä–Ω–∏:</Typography>
                  <FieldArray name="morpheme.root">
                    {({ remove, push }) => (
                        <>
                          {values.morpheme.root.map((root, index) => (
                              <Box display="flex" alignItems="center" key={index} mb={2}>
                                <Field name={`morpheme.root[${index}]`}>
                                  {({ field }: any) => (
                                      <Input className={"paragraph_base"}
                                             placeholder={"–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ—Ä–µ–Ω—å."}
                                          {...field}
                                          fullWidth
                                             multiline
                                          label={`–ö–æ—Ä–µ–Ω—å ${index + 1}`}
                                          variant="outlined"
                                          error={!!ErrorMessage}
                                          helperText={
                                            <ErrorMessage name={`morpheme.root[${index}]`} />
                                          }
                                      />
                                  )}
                                </Field>
                                <IconButton
                                    onClick={() => remove(index)}
                                    disabled={values.morpheme.root.length === 1}
                                    aria-label="—É–¥–∞–ª–∏—Ç—å"
                                    color="error"
                                >
                                  <Delete />
                                </IconButton>
                              </Box>
                          ))}
                          <Button
                              variant="contained"
                              startIcon={<Add />}
                              onClick={() => push("")}
                          >
                            –î–æ–±–∞–≤–∏—Ç—å –∫–æ—Ä–µ–Ω—å
                          </Button>
                        </>
                    )}
                  </FieldArray>
                </Box>

                {/* –û–ø–∏—Å–∞–Ω–∏–µ */}
                <Box mb={3}>
                  <Field name="description">
                    {({ field }: any) => (
                        <Input className={"paragraph_base"}
                            {...field}
                            fullWidth
                             placeholder={"–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –æ–ø–∏—Å–∞–Ω–∏–µ."}
                            label="–û–ø–∏—Å–∞–Ω–∏–µ"
                            variant="outlined"
                            multiline
                            rows={4}
                            error={!!ErrorMessage}
                            helperText={<ErrorMessage name="description" />}
                        />
                    )}
                  </Field>
                </Box>

                {/* –î—Ä—É–≥–∏–µ –ø–æ–ª—è... */}
                {/* –ü—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ */}
                <Box mb={3}>
                  <Typography variant="subtitle1">–ü—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ:</Typography>
                  <FieldArray name="derivatives">
                    {({ remove, push }) => (
                        <>
                          {values.derivatives.map((derivative, index) => (
                              <Box display="flex" alignItems="center" key={index} mb={2}>
                                <Field name={`derivatives[${index}]`}>
                                  {({ field }: any) => (
                                      <Input className={"paragraph_base"}
                                          {...field}
                                          fullWidth
                                             placeholder={"–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ."}
                                          label={`–ü—Ä–æ–∏–∑–≤–æ–¥–Ω–æ–µ ${index + 1}`}
                                          variant="outlined"
                                          error={!!ErrorMessage}
                                             multiline
                                          helperText={
                                            <ErrorMessage name={`derivatives[${index}]`} />
                                          }
                                      />
                                  )}
                                </Field>
                                <IconButton
                                    onClick={() => remove(index)}
                                    disabled={values.derivatives.length === 1}
                                    aria-label="—É–¥–∞–ª–∏—Ç—å"
                                    color="error"
                                >
                                  <Delete />
                                </IconButton>
                              </Box>
                          ))}
                          <Button
                              variant="contained"
                              startIcon={<Add />}
                              onClick={() => push("")}
                          >
                            –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–æ–µ
                          </Button>
                        </>
                    )}
                  </FieldArray>
                </Box>

                {/* –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ */}
                <Button
                    type="submit"
                    variant="contained"
                    color="primary"
                    fullWidth
                    size="large"
                >
                  –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å
                </Button>
              </Form>
          )}
        </Formik>
      </Box>
  );
};