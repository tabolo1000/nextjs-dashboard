"use client"

import React, { useState } from 'react';
import { Formik, Form, Field, ErrorMessage } from 'formik';

// –¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏
enum Operation {
    Add = '+',
    Subtract = '-',
    Multiply = '*',
    Divide = '/',
}

// –¢–∏–ø –∑–∞–¥–∞—á–∏ –¥–ª—è –±–∞–∑–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
interface BasicOperationsTask {
    question: string;
    correctAnswer: number;
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
interface Score {
    correct: number;
    incorrect: number;
    finished: boolean;
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á–∏ (–∑–∞–≥–ª—É—à–∫–∞, –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ—é —Ñ—É–Ω–∫—Ü–∏—é)
const generateTask = {
    basicOperations: (operation: Operation): BasicOperationsTask => {
        const num1 = Math.floor(Math.random() * 10) + 1;
        const num2 = Math.floor(Math.random() * 10) + 1;
        let question = '';
        let correctAnswer = 0;

        switch (operation) {
            case Operation.Add:
                question = `${num1} + ${num2}`;
                correctAnswer = num1 + num2;
                break;
            case Operation.Subtract:
                question = `${num1} - ${num2}`;
                correctAnswer = num1 - num2;
                break;
            case Operation.Multiply:
                question = `${num1} * ${num2}`;
                correctAnswer = num1 * num2;
                break;
            case Operation.Divide:
                question = `${num1} / ${num2}`;
                correctAnswer = parseFloat((num1 / num2).toFixed(2)); // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 2 –∑–Ω–∞–∫–æ–≤
                break;
        }

        return { question, correctAnswer };
    },
};

const NaturalNumbersTask: React.FC<{ operation?: Operation }> = ({ operation = Operation.Add }) => {
    // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∑–∞–¥–∞—á–∏, —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å—á–µ—Ç–∞
    const [task, setTask] = useState<BasicOperationsTask>(generateTask.basicOperations(operation));
    const [message, setMessage] = useState<string>('');
    const [score, setScore] = useState<Score>({ correct: 0, incorrect: 0, finished: false });

    // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ 10 –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    if (score.correct >= 20 && !score.finished) {
        setScore({ ...score, finished: true });
    }

    return (
        <div
            className="relative flex flex-col items-center justify-center min-h-[75vh] bg-gray-50 dark:bg-gray-800 rounded-lg p-6 shadow-lg text-center"
        >
            {/* –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ */}
            {score.finished ? (
                <h2 className="text-3xl font-bold mb-6 text-blue-600 dark:text-blue-400">
                    üéâ –ú–∏—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!
                </h2>
            ) : (
                <>
                    <h2 className="text-3xl font-bold mb-6 text-blue-600 dark:text-blue-400">
                        –†–µ—à–∏ –∑–∞–¥–∞—á—É
                    </h2>
                    <p className="text-lg mb-6">
                        <strong className="dark:text-white">{`${task.question} = x`}</strong>
                    </p>
                    <Formik
                        initialValues={{ answer: '' }}
                        validate={(values) => {
                            const errors: { answer?: string } = {};
                            if (!values.answer) {
                                errors.answer = '–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç!';
                            } else if (isNaN(Number(values.answer))) {
                                errors.answer = '–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!';
                            }
                            return errors;
                        }}
                        onSubmit={(values, { resetForm }) => {
                            const userAnswer = parseFloat(values.answer);
                            if (userAnswer === task.correctAnswer) {
                                setScore({
                                    ...score,
                                    correct: score.correct + 1,
                                });
                                setMessage('‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –ú–æ–ª–æ–¥–µ—Ü!');
                            } else {
                                setScore({
                                    ...score,
                                    incorrect: score.incorrect + 1,
                                });
                                setMessage(`‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ${task.correctAnswer}`);
                            }
                            resetForm();
                            setTask(generateTask.basicOperations(operation));
                        }}
                    >
                        {() => (
                            <Form className="w-full max-w-md mx-auto">
                                {/* –°—á–µ—Ç */}
                                <div className="absolute right-4 top-4 dark:text-red-500 text-blue-600 text-2xl font-bold">
                                    {`${score.correct} / ${score.incorrect}`}
                                </div>

                                {/* –ü–æ–ª–µ –≤–≤–æ–¥–∞ */}
                                <div className="mb-4">
                                    <Field
                                        type="text"
                                        name="answer"
                                        placeholder="–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç"
                                        className="w-full p-3 border border-gray-300 rounded shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
                                    />
                                    <ErrorMessage
                                        name="answer"
                                        component="div"
                                        className="text-red-500 text-sm mt-2"
                                    />
                                </div>

                                {/* –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ */}
                                <button
                                    type="submit"
                                    className="w-full py-3 bg-blue-500 hover:bg-blue-600 text-white text-lg font-medium rounded transition duration-200"
                                >
                                    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å
                                </button>
                            </Form>
                        )}
                    </Formik>

                    {/* –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ –∏–ª–∏ –æ—à–∏–±–∫–µ */}
                    {message && (
                        <p
                            className={`mt-6 text-lg font-semibold ${
                                message.includes('–ü—Ä–∞–≤–∏–ª—å–Ω–æ') ? 'text-green-500' : 'text-red-500'
                            }`}
                        >
                            {message}
                        </p>
                    )}
                </>
            )}
        </div>
    );
};

export default NaturalNumbersTask;