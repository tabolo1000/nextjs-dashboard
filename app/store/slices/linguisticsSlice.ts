import { createSlice } from '@reduxjs/toolkit';
import {createApiThunk} from "@/app/store/utils/apiThunk";
import {
    createWord,
    deleteWord,
    fetchCollectionWordsCarousel,
    fetchWordsCarousel,
    updateWord
} from "@/app/api/linguistics";

export enum LoadingStatus {
    padding = "padding",
    fulfilled = "fulfilled",
    rejected = "rejected",
}

const initialState: LinguisticsState = {
    wordsCarousel: [
        {
            "_id": "",
            "title": "–ü–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å: –∞–Ω–≥–ª. Persistence [p…ôÀàs…™st…ôns], —Ñ—Ä. Persistance [p…õ Å.si.st…ëÃÉs], –Ω–µ–º. Persistenz [Àåp…õ Å.z…™Ààst…õntÕ°s], –ø–æ–ª—å—Å–∫. Persystencja [p…õr.s…®sÀàt…õn.tÕ°sja]",
            "icon": "üîÑ",
            "quote": "¬´–ü–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å ‚Äî —ç—Ç–æ —É–º–µ–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –¥–≤–∏–≥–∞—Ç—å—Å—è –≤–ø–µ—Ä—ë–¥, –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –ª—é–±—ã–µ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è.¬ª",
            "description": "–°–ª–æ–≤–æ ¬´–ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å¬ª –∑–∞–∏–º—Å—Ç–≤–æ–≤–∞–Ω–æ –∏–∑ –ª–∞—Ç–∏–Ω—Å–∫–æ–≥–æ *persistentia*, —á—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç ¬´—Å—Ç–æ–π–∫–æ—Å—Ç—å¬ª, ¬´—É–ø–æ—Ä—Å—Ç–≤–æ¬ª –∏–ª–∏ ¬´–Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç—å¬ª. –ö–æ—Ä–µ–Ω—å *persistere* —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞ *per-* (¬´—á–µ—Ä–µ–∑¬ª, ¬´–¥–æ –∫–æ–Ω—Ü–∞¬ª) –∏ *sistere* (¬´—Å—Ç–æ—è—Ç—å¬ª, ¬´–æ—Å—Ç–∞–≤–∞—Ç—å—Å—è¬ª). –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ —Å–ª–æ–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–æ—Å—å –≤ –∑–Ω–∞—á–µ–Ω–∏–∏ ¬´–Ω–µ–∏–∑–º–µ–Ω–Ω–æ–µ —É–ø–æ—Ä—Å—Ç–≤–æ¬ª, –Ω–æ —Å —Ä–∞–∑–≤–∏—Ç–∏–µ–º –Ω–∞—É–∫–∏ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –ø—Ä–∏–æ–±—Ä–µ–ª–æ –±–æ–ª–µ–µ —à–∏—Ä–æ–∫–∏–π —Å–ø–µ–∫—Ç—Ä –∑–Ω–∞—á–µ–Ω–∏–π. –°–µ–≥–æ–¥–Ω—è —Ç–µ—Ä–º–∏–Ω –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –≤ —Ç–∞–∫–∏—Ö –æ–±–ª–∞—Å—Ç—è—Ö, –∫–∞–∫ –º–µ–¥–∏—Ü–∏–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –≤–∏—Ä—É—Å–æ–≤), –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–æ–ª–≥–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö), –ø—Å–∏—Ö–æ–ª–æ–≥–∏—è (—É–ø–æ—Ä—Å—Ç–≤–æ –≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —Ü–µ–ª–∏) –∏ –¥—Ä—É–≥–∏—Ö –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞—Ö. –í —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ —Ç–µ—Ä–º–∏–Ω –ø–æ—è–≤–∏–ª—Å—è –≤ XX –≤–µ–∫–µ, –æ—Å–æ–±–µ–Ω–Ω–æ —Å —Ä–æ—Å—Ç–æ–º –Ω–∞—É—á–Ω–æ–π –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã.",
            "morpheme": {
                "prefix": ["–ø–µ—Ä"],
                "root": ["—Å–∏—Å—Ç–µ–Ω—Ç"],
                "suffix": ["–Ω–æ—Å—Ç—å"]
            },
            "annotation": "–ü–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å —Å–∏–º–≤–æ–ª–∏–∑–∏—Ä—É–µ—Ç —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –∫–∞–∫ –≤ –ø—Ä–∏—Ä–æ–¥–µ, —Ç–∞–∫ –∏ –≤ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö. –≠—Ç–æ –∫–∞—á–µ—Å—Ç–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–µ–æ–¥–æ–ª–µ–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å.",
            "joke": "–ü–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å ‚Äî —ç—Ç–æ –∫–æ–≥–¥–∞ –¥–∞–∂–µ Wi-Fi –≤ –ø–æ–¥–≤–∞–ª–µ —É–ø–æ—Ä–Ω–æ –¥–µ—Ä–∂–∏—Ç –æ–¥–Ω—É –ø–∞–ª–æ—á–∫—É —Å–≤—è–∑–∏.",
            "derivatives": [
                "–ü–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ü–∏—è ‚Äî —É—Å—Ç–∞—Ä–µ–≤—à–∞—è —Ñ–æ—Ä–º–∞, –æ–±–æ–∑–Ω–∞—á–∞—é—â–∞—è —Å—Ç–æ–π–∫–æ—Å—Ç—å –∏–ª–∏ –¥–æ–ª–≥–æ–≤—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å.",
                ],
            "collections": [],
       }
    ],
    loading: {
            addWord: { status: LoadingStatus.fulfilled, message: null },
            deleteWord: { status: LoadingStatus.fulfilled, message: null },
            fetchWords: { status: LoadingStatus.fulfilled, message: null },
    },
    error: null,
};


// 1. Redux Toolkit uses the Immer library, which wraps state in a ‚Äúproxy object‚Äù.

const linguisticsSlice = createSlice({
    name: 'linguistics',
    initialState,
    reducers: {
        /*
        loadingWordForCarousel(
            state: LinguisticsState,
            action: PayloadAction<WordCarousel[]>
        ){
            state.wordsCarousel.push(...action.payload)
        },
       */
    },
    extraReducers: (builder) => {
        // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ª–æ–≤
        builder
            .addCase(loadWordsForCarousel.pending, (state) => {
                state.loading.fetchWords = {
                    status: LoadingStatus.padding,
                    message: "–ò–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞ —Å–ª–æ–≤...",
                };
                state.error = null;
            })
            .addCase(loadWordsForCarousel.fulfilled, (state, action) => {
                state.loading.fetchWords = {
                    status: LoadingStatus.fulfilled,
                    message: "–°–ª–æ–≤–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!!!",
                };
                state.wordsCarousel = action.payload;
            })
            .addCase(loadWordsForCarousel.rejected, (state, action) => {
                state.loading.fetchWords = {
                    status: LoadingStatus.rejected,
                    message: "–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ª–æ–≤ –Ω–µ —É–¥–∞–ª–∞—Å—å :(",
                };
                state.error = action.payload || "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ª–æ–≤–∞";
            });

        // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ª–æ–≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
        builder
            .addCase(loadCollectionWordsForCarousel.pending, (state) => {
                state.loading.fetchWords = {
                    status: LoadingStatus.padding,
                    message: "–ò–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞ —Å–ª–æ–≤...",
                };
                state.error = null;
            })
            .addCase(loadCollectionWordsForCarousel.fulfilled, (state, action) => {
                state.loading.fetchWords = {
                    status: LoadingStatus.fulfilled,
                    message: "–°–ª–æ–≤–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!!!",
                };
                state.wordsCarousel = action.payload;
            })
            .addCase(loadCollectionWordsForCarousel.rejected, (state, action) => {
                state.loading.fetchWords = {
                    status: LoadingStatus.rejected,
                    message: "–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ª–æ–≤ –Ω–µ —É–¥–∞–ª–∞—Å—å :(",
                };
                state.error = action.payload || "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ª–æ–≤–∞";
            });

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞
        builder
            .addCase(addWordToCarousel.pending, (state) => {
                state.loading.addWord = {
                    status: LoadingStatus.padding,
                    message: "–ò–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞...",
                };
                state.error = null;
            })
            .addCase(addWordToCarousel.fulfilled, (state, action) => {
                state.loading.addWord = {
                    status: LoadingStatus.fulfilled,
                    message: "–°–ª–æ–≤–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!!!",
                };
                state.wordsCarousel.push(action.payload);
            })
            .addCase(addWordToCarousel.rejected, (state, action) => {
                state.loading.addWord = {
                    status: LoadingStatus.rejected,
                    message: "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å :(",
                };
                state.error = action.payload || "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ";
            });

        // –£–¥–∞–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞
        builder
            .addCase(deleteWordToCarousel.pending, (state) => {
                state.loading.deleteWord = {
                    status: LoadingStatus.padding,
                    message: "–ò–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞...",
                };
                state.error = null;
            })
            .addCase(deleteWordToCarousel.fulfilled, (state, action) => {
                state.loading.deleteWord = {
                    status: LoadingStatus.fulfilled,
                    message: "–°–ª–æ–≤–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!!!",
                };

                const index = state.wordsCarousel.findIndex(
                    (el) => el._id === action.payload._id
                );
                if (index !== -1) {
                    state.wordsCarousel.splice(index, 1);
                }
            })
            .addCase(deleteWordToCarousel.rejected, (state, action) => {
                state.loading.deleteWord = {
                    status: LoadingStatus.rejected,
                    message: "–£–¥–∞–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å :(",
                };
                state.error = action.payload || "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ";
            });
    },
});

//export const { createWordForCarousel } = linguisticsSlice.actions;
export default linguisticsSlice.reducer;




//-------------------------------------------------Thunks-----------------------------------------

export const loadWordsForCarousel = createApiThunk<WordCarousel[], void>(
    'linguistics/loadWords',
    async () => {
        return fetchWordsCarousel(); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤
    }
);

export const loadCollectionWordsForCarousel = createApiThunk<WordCarousel[], Array<string>>(
    'linguistics/loadCollectionWords',
    async (collection) => {
        return fetchCollectionWordsCarousel(collection); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤
    }
);

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –≤ –∫–∞—Ä—É—Å–µ–ª—å
export const addWordToCarousel = createApiThunk<WordCarousel, AddWordCarouselUpdate>(
    'linguistics/addWord',
    async (newWord) => {
        return createWord(newWord); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ
    }
);

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞ –≤ –∫–∞—Ä—É—Å–µ–ª–∏
export const updateWordToCarousel = createApiThunk<WordCarousel, WordCarouselUpdate>(
    'linguistics/updateWord',
    async (newWord) => {
        return updateWord(newWord); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ
    }
);

// –£–¥–∞–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞ –≤ –∫–∞—Ä—É—Å–µ–ª–∏
export const deleteWordToCarousel = createApiThunk<WordCarousel, string>(
    'linguistics/deleteWord',
    async (id) => {
        return deleteWord(id); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É–¥–∞–ª–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ
    }
);

//--------------------------Types---------------------------------

interface ActionLoading {
    status: LoadingStatus;
    message: string | null;
}



export interface Loading {
    addWord: ActionLoading;
    deleteWord: ActionLoading;
    fetchWords: ActionLoading;
}

export interface WordCarousel {
    _id: string
    morpheme: WordCarouselMorpheme,
    title: string,
    description: string,
    icon: string,
    quote: string,
    annotation?: string,
    joke?: string,
    derivatives?: Array<string>
    collections?: string[],
}

export interface WordCarouselUpdate {
    _id: string;
    morpheme?: WordCarouselMorpheme,
    title?: string,
    description?: string,
    icon?: string,
    quote?: string,
    annotation?: string,
    joke?: string,
    derivatives?: Array<string>
    collections?: string[],
}

export interface AddWordCarouselUpdate {
    morpheme: WordCarouselMorpheme,
    title: string,
    description: string,
    icon: string,
    quote: string,
    annotation: string,
    joke: string,
    derivatives: Array<string>
    collections?: string[],
}

interface WordCarouselMorpheme {
    prefix?: Array<string>;
    root: Array<string>;
    suffix?: Array<string>;
    end?: Array<string>;
}

interface LinguisticsState {
    wordsCarousel: WordCarousel[],
    loading: Loading;
    error: string | null;
}