// jest.config.js
const nextJest = require('next/jest');
const path = require('path');

const createJestConfig = nextJest({
    dir: './',
});

const customJestConfig = {
    /**
     * 3. Разрешения модулей: moduleDirectories, moduleNameMapper, modulePaths
     *  Параметр moduleDirectories в конфигурации
     * Jest определяет директории,
     * в которых Jest ищет модули при разрешении импортов.
     *  ['node_modules', '<rootDir>'] Позволяет: Использовать
     * абсолютные импорты относительно корня проекта
     */
    moduleDirectories: ['node_modules', '<rootDir>'],
    /**
     * 2. Jest загружает и инициализирует указанное тестовое окружение
     * jest-environment-jsdom создает виртуальное DOM-окружение на основе jsdom
     * Здесь создаются глобальные объекты, доступные в тестах, такие как document, window, navigator
     */
    testEnvironment: 'jest-environment-jsdom',
    /**
     *
     * 3. Эта опция указывает Jest на файлы,
     * которые должны быть выполнены после
     * загрузки среды тестирования,
     * но до запуска тестов
     * <rootDir> - $PWD, pwd
     * jest.setup.ts - относительно от проекта(pwd)
     */
    setupFilesAfterEnv: ['<rootDir>/jest.setup.tsx'],
    /**
     * Параметр transform в конфигурации Jest определяет, какие трансформеры
     * будут применяться к определенным типам файлов перед их
     * выполнением.
     *  ^.+ - любое количество любых символов;
     *  \\.(ts|tsx)$ - ко всем ts|tsx
     *  'ts-jest' - имя трансформера, который будет применяться к файлам
     *   tsconfig: '<rootDir>/tsconfig.jest.json' - путь к специальной конфигурации TypeScript для Jest
     *     - Jest находит тестовые файлы
     *     - Для каждого файла Jest проверяет, нужна ли трансформация
     *     - Если файл соответствует шаблону '^.+\\.(ts|tsx)$', Jest применяет трансформер ts-jest
     *     - ts-jest компилирует TypeScript в JavaScript, используя указанную конфигурацию
     *     - Jest выполняет полученный JavaScript код
     */
    transform: {
        '^.+\\.(ts|tsx)$': ['ts-jest', {
            tsconfig: '<rootDir>/tsconfig.jest.json',
        }],
    },
    /**
     * В конфигурации Jest отвечает за перенаправление
     * (переопределение) импортов модулей.
     *      После настройки базового окружения
     *      Перед применением трансформеров к файлам
     *      До выполнения самого кода теста
     *
     *   - Перенаправляет импорты, начинающиеся с @/ в корень проекта
     *   - ^@/ - начало строки с '@/'
     *   - (.*)$ - захватывает все символы до конца строки
     *   - <rootDir>/$1 - заменяет на корневую директорию проекта + захваченные символы
     *   - @/components/Button на '/path/to/project/components/Button'
     *
     *   - Все импорты, начинающиеся с @ui/, будут перенаправлены в директорию <rootDir>/app/@ui/
     *   - @ui/common/Header на /path/to/project/app/@ui/common/Header
     *
     *   (бесполезно так как работает с модулями, а это не про tailwinds(+ в его копилку))
     *   - Заменяет импорты стилевых файлов на мок-модуль identity-obj-proxy
     *   - identity-obj-proxy - специальный npm-пакет, который возвращает прокси-объект, имитирующий импорт CSS модулей
     *   - Этот прием позволяет тестировать компоненты, импортирующие стили, без необходимости обрабатывать сами CSS файлы
     */
    moduleNameMapper: {
        // Исправляем карту алиасов для корректного сопоставления @/
        '^@/(.*)$': '<rootDir>/$1',
        // Добавляем специальный алиас для UI компонентов, если нужно
        '^@ui/(.*)$': '<rootDir>/app/@ui/$1',
        '\\.(css|less|scss|sass)$': 'identity-obj-proxy',
    },
    /**
     * По оптимизации и лишней траты ресурсов.
     *  Перед поиском тестовых файлов в проекте.
     *  Применяет шаблоны игнорирования перед выполнением других операций.
     *
     *  Параметр testPathIgnorePatterns определяет шаблоны путей,
     * которые Jest должен игнорировать при поиске тестовых файлов.
     * Это позволяет исключить определенные директории из процесса
     * тестирования.
     *   Папки node_modules и .next прощайте.
     *
     *   - testMatch / testRegex - определяют, какие файлы включать в тестирование
     *   + testPathIgnorePatterns - определяет, какие пути исключать
     *   - roots - определяет, в каких директориях искать тесты
     */
    testPathIgnorePatterns: [
        '<rootDir>/node_modules/',
        '<rootDir>/.next/',
        '<rootDir>/.storybook/',
        '<rootDir>/public/',
        '<rootDir>/.idea/'
    ],
    /**
     * Параметр transformIgnorePatterns определяет,
     *  какие файлы должны быть исключены из процесса трансформации
     *  (преобразования) Jest. Это отличается от testPathIgnorePatterns тем,
     *  что файлы не исключаются из тестирования полностью, а просто не проходят через указанные трансформеры.
     *   /node_modules/ и .module.css
     *
     *   + transform - определяет, какие трансформеры применять к файлам
     *   + moduleNameMapper - может использоваться для мокирования файлов, исключенных из трансформации
     *   - extensionsToTreatAsEsm - определяет, какие расширения файлов должны обрабатываться как ES модули
     */
    transformIgnorePatterns: [
        '/node_modules/',
        '^.+\\.module\\.(css|sass|scss)$'
    ],
    /**
     * Параметр collectCoverageFrom определяет, какие файлы проекта
     *  должны быть включены в отчет о покрытии кода тестами.
     *  Это важная настройка для анализа качества тестов и
     *  определения, какие части кода протестированы, а какие нет.
     *
     * Включающие паттерны (без восклицательного знака):
     * Исключающие паттерны (с восклицательным знаком в начале):
     *
     *  - collectCoverage - включает/выключает сбор информации о покрытии
     *  - coverageDirectory - определяет, куда сохранять отчеты о покрытии
     *  - coverageReporters - определяет форматы отчетов (html, lcov, text и др.)
     *  - coverageThreshold - устанавливает минимальные пороги покрытия
     */
    collectCoverageFrom: [
        '**/*.{js,jsx,ts,tsx}',
        'app/**/*.{js,jsx,ts,tsx}',
        '!**/*.d.ts',
        '!**/node_modules/**',
        '!**/.next/**',
        '!jest.config.js',
        '!jest.setup.tsx',
        '!jest.resolver.js',
        '!next.config.js',
        '!tsconfig.json',
        '!tsconfig.jest.json',
    ],
    /**
     * Параметр resolver в конфигурации Jest указывает на модуль,
     *  который будет использоваться для разрешения импортов и
     *  требований (requires) в тестах. Это один из самых мощных
     *  инструментов для настройки Jest в сложных проектах с
     *  нестандартной структурой импортов.
     */
    resolver: '<rootDir>/jest.resolver.js',
    // Добавляем modifyDirectories для корректной работы с относительными путями
    modulePaths: [path.resolve(__dirname)],

    /**
     *  Jest сначала загружает базовую
     * конфигурацию из выбранного пресета.
     *  Определяет предустановленную
     * конфигурацию которую Jest будет использовать.
     *  Пресет ts-jest настраивает трансформеры
     * для работы с TypeScript
     */
    preset: 'ts-jest',
};

module.exports = createJestConfig(customJestConfig);
