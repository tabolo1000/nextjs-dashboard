import { NextResponse } from "next/server";
import type { NextRequest } from "next/server";
import createMiddleware from "next-intl/middleware";
import { routing } from "./i18n/routing";

const intlMiddleware = createMiddleware(routing);

export function middleware(request: NextRequest) {
  const {pathname}  = request.nextUrl;
  const token = request.cookies.get("access_token")?.value; // üî• –ß–∏—Ç–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ cookies

  debugger
  // ‚úÖ –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∏ –ø—ã—Ç–∞–µ—Ç—Å—è –∑–∞–π—Ç–∏ –Ω–∞ `/profile` ‚Üí —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ `/login`
  if (!token && pathname.endsWith("/profile")) {
    debugger
    return NextResponse.redirect(new URL("/login", request.url));
  }

  // ‚úÖ –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∏ –ø—ã—Ç–∞–µ—Ç—Å—è –∑–∞–π—Ç–∏ –Ω–∞ `/login` ‚Üí —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ `/profile`
  if (token && pathname.endsWith("/login")) {
    debugger
    return NextResponse.redirect(new URL("/profile", request.url));
  }

  // üìå –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ `next-intl/middleware`
  return intlMiddleware(request);
}

export const config = {
  matcher: [
    // üî• Middleware —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö `/login` –∏ `/profile`
    "/login",
    "/profile",

    // üî• –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ (–∏—Å–∫–ª—é—á–∞–µ–º API, —Å—Ç–∞—Ç–∏–∫—É –∏ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ–∞–π–ª—ã)
    "/((?!api|_next/static|_next/image|favicon.ico|sitemap.xml|robots.txt|public|dh).*)",
  ],
};